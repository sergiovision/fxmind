/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fxmind.global;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

//import javax.annotation.processing.Generated;
import javax.annotation.Generated;

import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-5-29")
public class ScheduledJob implements org.apache.thrift.TBase<ScheduledJob, ScheduledJob._Fields>, java.io.Serializable, Cloneable, Comparable<ScheduledJob> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScheduledJob");

  private static final org.apache.thrift.protocol.TField IS_RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("isRunning", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("Group", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("Log", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("Schedule", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PREV_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("PrevTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField NEXT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("NextTime", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScheduledJobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScheduledJobTupleSchemeFactory());
  }

  public boolean isRunning; // required
  public String Group; // required
  public String Name; // required
  public String Log; // required
  public String Schedule; // required
  public long PrevTime; // required
  public long NextTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_RUNNING((short)1, "isRunning"),
    GROUP((short)2, "Group"),
    NAME((short)3, "Name"),
    LOG((short)4, "Log"),
    SCHEDULE((short)5, "Schedule"),
    PREV_TIME((short)6, "PrevTime"),
    NEXT_TIME((short)7, "NextTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_RUNNING
          return IS_RUNNING;
        case 2: // GROUP
          return GROUP;
        case 3: // NAME
          return NAME;
        case 4: // LOG
          return LOG;
        case 5: // SCHEDULE
          return SCHEDULE;
        case 6: // PREV_TIME
          return PREV_TIME;
        case 7: // NEXT_TIME
          return NEXT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISRUNNING_ISSET_ID = 0;
  private static final int __PREVTIME_ISSET_ID = 1;
  private static final int __NEXTTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_RUNNING, new org.apache.thrift.meta_data.FieldMetaData("isRunning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("Group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("Log", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("Schedule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREV_TIME, new org.apache.thrift.meta_data.FieldMetaData("PrevTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_TIME, new org.apache.thrift.meta_data.FieldMetaData("NextTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScheduledJob.class, metaDataMap);
  }

  public ScheduledJob() {
  }

  public ScheduledJob(
    boolean isRunning,
    String Group,
    String Name,
    String Log,
    String Schedule,
    long PrevTime,
    long NextTime)
  {
    this();
    this.isRunning = isRunning;
    setIsRunningIsSet(true);
    this.Group = Group;
    this.Name = Name;
    this.Log = Log;
    this.Schedule = Schedule;
    this.PrevTime = PrevTime;
    setPrevTimeIsSet(true);
    this.NextTime = NextTime;
    setNextTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScheduledJob(ScheduledJob other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isRunning = other.isRunning;
    if (other.isSetGroup()) {
      this.Group = other.Group;
    }
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetLog()) {
      this.Log = other.Log;
    }
    if (other.isSetSchedule()) {
      this.Schedule = other.Schedule;
    }
    this.PrevTime = other.PrevTime;
    this.NextTime = other.NextTime;
  }

  public ScheduledJob deepCopy() {
    return new ScheduledJob(this);
  }

  @Override
  public void clear() {
    setIsRunningIsSet(false);
    this.isRunning = false;
    this.Group = null;
    this.Name = null;
    this.Log = null;
    this.Schedule = null;
    setPrevTimeIsSet(false);
    this.PrevTime = 0;
    setNextTimeIsSet(false);
    this.NextTime = 0;
  }

  public boolean isIsRunning() {
    return this.isRunning;
  }

  public ScheduledJob setIsRunning(boolean isRunning) {
    this.isRunning = isRunning;
    setIsRunningIsSet(true);
    return this;
  }

  public void unsetIsRunning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRUNNING_ISSET_ID);
  }

  /** Returns true if field isRunning is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRunning() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRUNNING_ISSET_ID);
  }

  public void setIsRunningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRUNNING_ISSET_ID, value);
  }

  public String getGroup() {
    return this.Group;
  }

  public ScheduledJob setGroup(String Group) {
    this.Group = Group;
    return this;
  }

  public void unsetGroup() {
    this.Group = null;
  }

  /** Returns true if field Group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.Group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.Group = null;
    }
  }

  public String getName() {
    return this.Name;
  }

  public ScheduledJob setName(String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public String getLog() {
    return this.Log;
  }

  public ScheduledJob setLog(String Log) {
    this.Log = Log;
    return this;
  }

  public void unsetLog() {
    this.Log = null;
  }

  /** Returns true if field Log is set (has been assigned a value) and false otherwise */
  public boolean isSetLog() {
    return this.Log != null;
  }

  public void setLogIsSet(boolean value) {
    if (!value) {
      this.Log = null;
    }
  }

  public String getSchedule() {
    return this.Schedule;
  }

  public ScheduledJob setSchedule(String Schedule) {
    this.Schedule = Schedule;
    return this;
  }

  public void unsetSchedule() {
    this.Schedule = null;
  }

  /** Returns true if field Schedule is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule() {
    return this.Schedule != null;
  }

  public void setScheduleIsSet(boolean value) {
    if (!value) {
      this.Schedule = null;
    }
  }

  public long getPrevTime() {
    return this.PrevTime;
  }

  public ScheduledJob setPrevTime(long PrevTime) {
    this.PrevTime = PrevTime;
    setPrevTimeIsSet(true);
    return this;
  }

  public void unsetPrevTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVTIME_ISSET_ID);
  }

  /** Returns true if field PrevTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrevTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PREVTIME_ISSET_ID);
  }

  public void setPrevTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVTIME_ISSET_ID, value);
  }

  public long getNextTime() {
    return this.NextTime;
  }

  public ScheduledJob setNextTime(long NextTime) {
    this.NextTime = NextTime;
    setNextTimeIsSet(true);
    return this;
  }

  public void unsetNextTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTTIME_ISSET_ID);
  }

  /** Returns true if field NextTime is set (has been assigned a value) and false otherwise */
  public boolean isSetNextTime() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTTIME_ISSET_ID);
  }

  public void setNextTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_RUNNING:
      if (value == null) {
        unsetIsRunning();
      } else {
        setIsRunning((Boolean)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case LOG:
      if (value == null) {
        unsetLog();
      } else {
        setLog((String)value);
      }
      break;

    case SCHEDULE:
      if (value == null) {
        unsetSchedule();
      } else {
        setSchedule((String)value);
      }
      break;

    case PREV_TIME:
      if (value == null) {
        unsetPrevTime();
      } else {
        setPrevTime((Long)value);
      }
      break;

    case NEXT_TIME:
      if (value == null) {
        unsetNextTime();
      } else {
        setNextTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_RUNNING:
      return Boolean.valueOf(isIsRunning());

    case GROUP:
      return getGroup();

    case NAME:
      return getName();

    case LOG:
      return getLog();

    case SCHEDULE:
      return getSchedule();

    case PREV_TIME:
      return Long.valueOf(getPrevTime());

    case NEXT_TIME:
      return Long.valueOf(getNextTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_RUNNING:
      return isSetIsRunning();
    case GROUP:
      return isSetGroup();
    case NAME:
      return isSetName();
    case LOG:
      return isSetLog();
    case SCHEDULE:
      return isSetSchedule();
    case PREV_TIME:
      return isSetPrevTime();
    case NEXT_TIME:
      return isSetNextTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScheduledJob)
      return this.equals((ScheduledJob)that);
    return false;
  }

  public boolean equals(ScheduledJob that) {
    if (that == null)
      return false;

    boolean this_present_isRunning = true;
    boolean that_present_isRunning = true;
    if (this_present_isRunning || that_present_isRunning) {
      if (!(this_present_isRunning && that_present_isRunning))
        return false;
      if (this.isRunning != that.isRunning)
        return false;
    }

    boolean this_present_Group = true && this.isSetGroup();
    boolean that_present_Group = true && that.isSetGroup();
    if (this_present_Group || that_present_Group) {
      if (!(this_present_Group && that_present_Group))
        return false;
      if (!this.Group.equals(that.Group))
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Log = true && this.isSetLog();
    boolean that_present_Log = true && that.isSetLog();
    if (this_present_Log || that_present_Log) {
      if (!(this_present_Log && that_present_Log))
        return false;
      if (!this.Log.equals(that.Log))
        return false;
    }

    boolean this_present_Schedule = true && this.isSetSchedule();
    boolean that_present_Schedule = true && that.isSetSchedule();
    if (this_present_Schedule || that_present_Schedule) {
      if (!(this_present_Schedule && that_present_Schedule))
        return false;
      if (!this.Schedule.equals(that.Schedule))
        return false;
    }

    boolean this_present_PrevTime = true;
    boolean that_present_PrevTime = true;
    if (this_present_PrevTime || that_present_PrevTime) {
      if (!(this_present_PrevTime && that_present_PrevTime))
        return false;
      if (this.PrevTime != that.PrevTime)
        return false;
    }

    boolean this_present_NextTime = true;
    boolean that_present_NextTime = true;
    if (this_present_NextTime || that_present_NextTime) {
      if (!(this_present_NextTime && that_present_NextTime))
        return false;
      if (this.NextTime != that.NextTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isRunning = true;
    list.add(present_isRunning);
    if (present_isRunning)
      list.add(isRunning);

    boolean present_Group = true && (isSetGroup());
    list.add(present_Group);
    if (present_Group)
      list.add(Group);

    boolean present_Name = true && (isSetName());
    list.add(present_Name);
    if (present_Name)
      list.add(Name);

    boolean present_Log = true && (isSetLog());
    list.add(present_Log);
    if (present_Log)
      list.add(Log);

    boolean present_Schedule = true && (isSetSchedule());
    list.add(present_Schedule);
    if (present_Schedule)
      list.add(Schedule);

    boolean present_PrevTime = true;
    list.add(present_PrevTime);
    if (present_PrevTime)
      list.add(PrevTime);

    boolean present_NextTime = true;
    list.add(present_NextTime);
    if (present_NextTime)
      list.add(NextTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(ScheduledJob other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsRunning()).compareTo(other.isSetIsRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRunning, other.isRunning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Group, other.Group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Log, other.Log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedule()).compareTo(other.isSetSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Schedule, other.Schedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrevTime()).compareTo(other.isSetPrevTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrevTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PrevTime, other.PrevTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextTime()).compareTo(other.isSetNextTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NextTime, other.NextTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScheduledJob(");
    boolean first = true;

    sb.append("isRunning:");
    sb.append(this.isRunning);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Group:");
    if (this.Group == null) {
      sb.append("null");
    } else {
      sb.append(this.Group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Log:");
    if (this.Log == null) {
      sb.append("null");
    } else {
      sb.append(this.Log);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Schedule:");
    if (this.Schedule == null) {
      sb.append("null");
    } else {
      sb.append(this.Schedule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PrevTime:");
    sb.append(this.PrevTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NextTime:");
    sb.append(this.NextTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScheduledJobStandardSchemeFactory implements SchemeFactory {
    public ScheduledJobStandardScheme getScheme() {
      return new ScheduledJobStandardScheme();
    }
  }

  private static class ScheduledJobStandardScheme extends StandardScheme<ScheduledJob> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScheduledJob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRunning = iprot.readBool();
              struct.setIsRunningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Log = iprot.readString();
              struct.setLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Schedule = iprot.readString();
              struct.setScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PREV_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.PrevTime = iprot.readI64();
              struct.setPrevTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEXT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.NextTime = iprot.readI64();
              struct.setNextTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScheduledJob struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_RUNNING_FIELD_DESC);
      oprot.writeBool(struct.isRunning);
      oprot.writeFieldEnd();
      if (struct.Group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.Group);
        oprot.writeFieldEnd();
      }
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Log != null) {
        oprot.writeFieldBegin(LOG_FIELD_DESC);
        oprot.writeString(struct.Log);
        oprot.writeFieldEnd();
      }
      if (struct.Schedule != null) {
        oprot.writeFieldBegin(SCHEDULE_FIELD_DESC);
        oprot.writeString(struct.Schedule);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PREV_TIME_FIELD_DESC);
      oprot.writeI64(struct.PrevTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_TIME_FIELD_DESC);
      oprot.writeI64(struct.NextTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScheduledJobTupleSchemeFactory implements SchemeFactory {
    public ScheduledJobTupleScheme getScheme() {
      return new ScheduledJobTupleScheme();
    }
  }

  private static class ScheduledJobTupleScheme extends TupleScheme<ScheduledJob> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScheduledJob struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsRunning()) {
        optionals.set(0);
      }
      if (struct.isSetGroup()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetLog()) {
        optionals.set(3);
      }
      if (struct.isSetSchedule()) {
        optionals.set(4);
      }
      if (struct.isSetPrevTime()) {
        optionals.set(5);
      }
      if (struct.isSetNextTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetIsRunning()) {
        oprot.writeBool(struct.isRunning);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.Group);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetLog()) {
        oprot.writeString(struct.Log);
      }
      if (struct.isSetSchedule()) {
        oprot.writeString(struct.Schedule);
      }
      if (struct.isSetPrevTime()) {
        oprot.writeI64(struct.PrevTime);
      }
      if (struct.isSetNextTime()) {
        oprot.writeI64(struct.NextTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScheduledJob struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.isRunning = iprot.readBool();
        struct.setIsRunningIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Log = iprot.readString();
        struct.setLogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Schedule = iprot.readString();
        struct.setScheduleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.PrevTime = iprot.readI64();
        struct.setPrevTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.NextTime = iprot.readI64();
        struct.setNextTimeIsSet(true);
      }
    }
  }

}

