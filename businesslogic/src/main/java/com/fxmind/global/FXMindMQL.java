/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fxmind.global;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-5-29")
public class FXMindMQL {

  /**
   * Ahh, now onto the cool part, defining a service. Services just need a name
   * and can optionally inherit from another service using the extends keyword.
   */
  public interface Iface {

    public List<String> ProcessStringData(Map<String,String> paramsList, List<String> inputData) throws org.apache.thrift.TException;

    public List<Double> ProcessDoubleData(Map<String,String> paramsList, List<String> inputData) throws org.apache.thrift.TException;

    public long IsServerActive(Map<String,String> paramsList) throws org.apache.thrift.TException;

    public void PostStatusMessage(Map<String,String> paramsList) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ProcessStringData(Map<String,String> paramsList, List<String> inputData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ProcessDoubleData(Map<String,String> paramsList, List<String> inputData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void IsServerActive(Map<String,String> paramsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void PostStatusMessage(Map<String,String> paramsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<String> ProcessStringData(Map<String,String> paramsList, List<String> inputData) throws org.apache.thrift.TException
    {
      send_ProcessStringData(paramsList, inputData);
      return recv_ProcessStringData();
    }

    public void send_ProcessStringData(Map<String,String> paramsList, List<String> inputData) throws org.apache.thrift.TException
    {
      ProcessStringData_args args = new ProcessStringData_args();
      args.setParamsList(paramsList);
      args.setInputData(inputData);
      sendBase("ProcessStringData", args);
    }

    public List<String> recv_ProcessStringData() throws org.apache.thrift.TException
    {
      ProcessStringData_result result = new ProcessStringData_result();
      receiveBase(result, "ProcessStringData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ProcessStringData failed: unknown result");
    }

    public List<Double> ProcessDoubleData(Map<String,String> paramsList, List<String> inputData) throws org.apache.thrift.TException
    {
      send_ProcessDoubleData(paramsList, inputData);
      return recv_ProcessDoubleData();
    }

    public void send_ProcessDoubleData(Map<String,String> paramsList, List<String> inputData) throws org.apache.thrift.TException
    {
      ProcessDoubleData_args args = new ProcessDoubleData_args();
      args.setParamsList(paramsList);
      args.setInputData(inputData);
      sendBase("ProcessDoubleData", args);
    }

    public List<Double> recv_ProcessDoubleData() throws org.apache.thrift.TException
    {
      ProcessDoubleData_result result = new ProcessDoubleData_result();
      receiveBase(result, "ProcessDoubleData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ProcessDoubleData failed: unknown result");
    }

    public long IsServerActive(Map<String,String> paramsList) throws org.apache.thrift.TException
    {
      send_IsServerActive(paramsList);
      return recv_IsServerActive();
    }

    public void send_IsServerActive(Map<String,String> paramsList) throws org.apache.thrift.TException
    {
      IsServerActive_args args = new IsServerActive_args();
      args.setParamsList(paramsList);
      sendBase("IsServerActive", args);
    }

    public long recv_IsServerActive() throws org.apache.thrift.TException
    {
      IsServerActive_result result = new IsServerActive_result();
      receiveBase(result, "IsServerActive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsServerActive failed: unknown result");
    }

    public void PostStatusMessage(Map<String,String> paramsList) throws org.apache.thrift.TException
    {
      send_PostStatusMessage(paramsList);
    }

    public void send_PostStatusMessage(Map<String,String> paramsList) throws org.apache.thrift.TException
    {
      PostStatusMessage_args args = new PostStatusMessage_args();
      args.setParamsList(paramsList);
      sendBase("PostStatusMessage", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ProcessStringData(Map<String,String> paramsList, List<String> inputData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ProcessStringData_call method_call = new ProcessStringData_call(paramsList, inputData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ProcessStringData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramsList;
      private List<String> inputData;
      public ProcessStringData_call(Map<String,String> paramsList, List<String> inputData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramsList = paramsList;
        this.inputData = inputData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ProcessStringData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ProcessStringData_args args = new ProcessStringData_args();
        args.setParamsList(paramsList);
        args.setInputData(inputData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ProcessStringData();
      }
    }

    public void ProcessDoubleData(Map<String,String> paramsList, List<String> inputData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ProcessDoubleData_call method_call = new ProcessDoubleData_call(paramsList, inputData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ProcessDoubleData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramsList;
      private List<String> inputData;
      public ProcessDoubleData_call(Map<String,String> paramsList, List<String> inputData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramsList = paramsList;
        this.inputData = inputData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ProcessDoubleData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ProcessDoubleData_args args = new ProcessDoubleData_args();
        args.setParamsList(paramsList);
        args.setInputData(inputData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ProcessDoubleData();
      }
    }

    public void IsServerActive(Map<String,String> paramsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsServerActive_call method_call = new IsServerActive_call(paramsList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsServerActive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramsList;
      public IsServerActive_call(Map<String,String> paramsList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramsList = paramsList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsServerActive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsServerActive_args args = new IsServerActive_args();
        args.setParamsList(paramsList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsServerActive();
      }
    }

    public void PostStatusMessage(Map<String,String> paramsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PostStatusMessage_call method_call = new PostStatusMessage_call(paramsList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PostStatusMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramsList;
      public PostStatusMessage_call(Map<String,String> paramsList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.paramsList = paramsList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PostStatusMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PostStatusMessage_args args = new PostStatusMessage_args();
        args.setParamsList(paramsList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ProcessStringData", new ProcessStringData());
      processMap.put("ProcessDoubleData", new ProcessDoubleData());
      processMap.put("IsServerActive", new IsServerActive());
      processMap.put("PostStatusMessage", new PostStatusMessage());
      return processMap;
    }

    public static class ProcessStringData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ProcessStringData_args> {
      public ProcessStringData() {
        super("ProcessStringData");
      }

      public ProcessStringData_args getEmptyArgsInstance() {
        return new ProcessStringData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ProcessStringData_result getResult(I iface, ProcessStringData_args args) throws org.apache.thrift.TException {
        ProcessStringData_result result = new ProcessStringData_result();
        result.success = iface.ProcessStringData(args.paramsList, args.inputData);
        return result;
      }
    }

    public static class ProcessDoubleData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ProcessDoubleData_args> {
      public ProcessDoubleData() {
        super("ProcessDoubleData");
      }

      public ProcessDoubleData_args getEmptyArgsInstance() {
        return new ProcessDoubleData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ProcessDoubleData_result getResult(I iface, ProcessDoubleData_args args) throws org.apache.thrift.TException {
        ProcessDoubleData_result result = new ProcessDoubleData_result();
        result.success = iface.ProcessDoubleData(args.paramsList, args.inputData);
        return result;
      }
    }

    public static class IsServerActive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsServerActive_args> {
      public IsServerActive() {
        super("IsServerActive");
      }

      public IsServerActive_args getEmptyArgsInstance() {
        return new IsServerActive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public IsServerActive_result getResult(I iface, IsServerActive_args args) throws org.apache.thrift.TException {
        IsServerActive_result result = new IsServerActive_result();
        result.success = iface.IsServerActive(args.paramsList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class PostStatusMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PostStatusMessage_args> {
      public PostStatusMessage() {
        super("PostStatusMessage");
      }

      public PostStatusMessage_args getEmptyArgsInstance() {
        return new PostStatusMessage_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, PostStatusMessage_args args) throws org.apache.thrift.TException {
        iface.PostStatusMessage(args.paramsList);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ProcessStringData", new ProcessStringData());
      processMap.put("ProcessDoubleData", new ProcessDoubleData());
      processMap.put("IsServerActive", new IsServerActive());
      processMap.put("PostStatusMessage", new PostStatusMessage());
      return processMap;
    }

    public static class ProcessStringData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ProcessStringData_args, List<String>> {
      public ProcessStringData() {
        super("ProcessStringData");
      }

      public ProcessStringData_args getEmptyArgsInstance() {
        return new ProcessStringData_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            ProcessStringData_result result = new ProcessStringData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ProcessStringData_result result = new ProcessStringData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ProcessStringData_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.ProcessStringData(args.paramsList, args.inputData,resultHandler);
      }
    }

    public static class ProcessDoubleData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ProcessDoubleData_args, List<Double>> {
      public ProcessDoubleData() {
        super("ProcessDoubleData");
      }

      public ProcessDoubleData_args getEmptyArgsInstance() {
        return new ProcessDoubleData_args();
      }

      public AsyncMethodCallback<List<Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Double>>() { 
          public void onComplete(List<Double> o) {
            ProcessDoubleData_result result = new ProcessDoubleData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ProcessDoubleData_result result = new ProcessDoubleData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ProcessDoubleData_args args, org.apache.thrift.async.AsyncMethodCallback<List<Double>> resultHandler) throws TException {
        iface.ProcessDoubleData(args.paramsList, args.inputData,resultHandler);
      }
    }

    public static class IsServerActive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, IsServerActive_args, Long> {
      public IsServerActive() {
        super("IsServerActive");
      }

      public IsServerActive_args getEmptyArgsInstance() {
        return new IsServerActive_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            IsServerActive_result result = new IsServerActive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            IsServerActive_result result = new IsServerActive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, IsServerActive_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.IsServerActive(args.paramsList,resultHandler);
      }
    }

    public static class PostStatusMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, PostStatusMessage_args, Void> {
      public PostStatusMessage() {
        super("PostStatusMessage");
      }

      public PostStatusMessage_args getEmptyArgsInstance() {
        return new PostStatusMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, PostStatusMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.PostStatusMessage(args.paramsList,resultHandler);
      }
    }

  }

  public static class ProcessStringData_args implements org.apache.thrift.TBase<ProcessStringData_args, ProcessStringData_args._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessStringData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessStringData_args");

    private static final org.apache.thrift.protocol.TField PARAMS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsList", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("inputData", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ProcessStringData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ProcessStringData_argsTupleSchemeFactory());
    }

    public Map<String,String> paramsList; // required
    public List<String> inputData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS_LIST((short)1, "paramsList"),
      INPUT_DATA((short)2, "inputData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS_LIST
            return PARAMS_LIST;
          case 2: // INPUT_DATA
            return INPUT_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.INPUT_DATA, new org.apache.thrift.meta_data.FieldMetaData("inputData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessStringData_args.class, metaDataMap);
    }

    public ProcessStringData_args() {
    }

    public ProcessStringData_args(
      Map<String,String> paramsList,
      List<String> inputData)
    {
      this();
      this.paramsList = paramsList;
      this.inputData = inputData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ProcessStringData_args(ProcessStringData_args other) {
      if (other.isSetParamsList()) {
        Map<String,String> __this__paramsList = new HashMap<String,String>(other.paramsList);
        this.paramsList = __this__paramsList;
      }
      if (other.isSetInputData()) {
        List<String> __this__inputData = new ArrayList<String>(other.inputData);
        this.inputData = __this__inputData;
      }
    }

    public ProcessStringData_args deepCopy() {
      return new ProcessStringData_args(this);
    }

    @Override
    public void clear() {
      this.paramsList = null;
      this.inputData = null;
    }

    public int getParamsListSize() {
      return (this.paramsList == null) ? 0 : this.paramsList.size();
    }

    public void putToParamsList(String key, String val) {
      if (this.paramsList == null) {
        this.paramsList = new HashMap<String,String>();
      }
      this.paramsList.put(key, val);
    }

    public Map<String,String> getParamsList() {
      return this.paramsList;
    }

    public ProcessStringData_args setParamsList(Map<String,String> paramsList) {
      this.paramsList = paramsList;
      return this;
    }

    public void unsetParamsList() {
      this.paramsList = null;
    }

    /** Returns true if field paramsList is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsList() {
      return this.paramsList != null;
    }

    public void setParamsListIsSet(boolean value) {
      if (!value) {
        this.paramsList = null;
      }
    }

    public int getInputDataSize() {
      return (this.inputData == null) ? 0 : this.inputData.size();
    }

    public java.util.Iterator<String> getInputDataIterator() {
      return (this.inputData == null) ? null : this.inputData.iterator();
    }

    public void addToInputData(String elem) {
      if (this.inputData == null) {
        this.inputData = new ArrayList<String>();
      }
      this.inputData.add(elem);
    }

    public List<String> getInputData() {
      return this.inputData;
    }

    public ProcessStringData_args setInputData(List<String> inputData) {
      this.inputData = inputData;
      return this;
    }

    public void unsetInputData() {
      this.inputData = null;
    }

    /** Returns true if field inputData is set (has been assigned a value) and false otherwise */
    public boolean isSetInputData() {
      return this.inputData != null;
    }

    public void setInputDataIsSet(boolean value) {
      if (!value) {
        this.inputData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS_LIST:
        if (value == null) {
          unsetParamsList();
        } else {
          setParamsList((Map<String,String>)value);
        }
        break;

      case INPUT_DATA:
        if (value == null) {
          unsetInputData();
        } else {
          setInputData((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS_LIST:
        return getParamsList();

      case INPUT_DATA:
        return getInputData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS_LIST:
        return isSetParamsList();
      case INPUT_DATA:
        return isSetInputData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ProcessStringData_args)
        return this.equals((ProcessStringData_args)that);
      return false;
    }

    public boolean equals(ProcessStringData_args that) {
      if (that == null)
        return false;

      boolean this_present_paramsList = true && this.isSetParamsList();
      boolean that_present_paramsList = true && that.isSetParamsList();
      if (this_present_paramsList || that_present_paramsList) {
        if (!(this_present_paramsList && that_present_paramsList))
          return false;
        if (!this.paramsList.equals(that.paramsList))
          return false;
      }

      boolean this_present_inputData = true && this.isSetInputData();
      boolean that_present_inputData = true && that.isSetInputData();
      if (this_present_inputData || that_present_inputData) {
        if (!(this_present_inputData && that_present_inputData))
          return false;
        if (!this.inputData.equals(that.inputData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paramsList = true && (isSetParamsList());
      list.add(present_paramsList);
      if (present_paramsList)
        list.add(paramsList);

      boolean present_inputData = true && (isSetInputData());
      list.add(present_inputData);
      if (present_inputData)
        list.add(inputData);

      return list.hashCode();
    }

    @Override
    public int compareTo(ProcessStringData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamsList()).compareTo(other.isSetParamsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsList, other.paramsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputData()).compareTo(other.isSetInputData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputData, other.inputData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ProcessStringData_args(");
      boolean first = true;

      sb.append("paramsList:");
      if (this.paramsList == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputData:");
      if (this.inputData == null) {
        sb.append("null");
      } else {
        sb.append(this.inputData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ProcessStringData_argsStandardSchemeFactory implements SchemeFactory {
      public ProcessStringData_argsStandardScheme getScheme() {
        return new ProcessStringData_argsStandardScheme();
      }
    }

    private static class ProcessStringData_argsStandardScheme extends StandardScheme<ProcessStringData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessStringData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.paramsList = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.paramsList.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                  struct.inputData = new ArrayList<String>(_list4.size);
                  String _elem5;
                  for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                  {
                    _elem5 = iprot.readString();
                    struct.inputData.add(_elem5);
                  }
                  iprot.readListEnd();
                }
                struct.setInputDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessStringData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramsList != null) {
          oprot.writeFieldBegin(PARAMS_LIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramsList.size()));
            for (Map.Entry<String, String> _iter7 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              oprot.writeString(_iter7.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.inputData != null) {
          oprot.writeFieldBegin(INPUT_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.inputData.size()));
            for (String _iter8 : struct.inputData)
            {
              oprot.writeString(_iter8);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ProcessStringData_argsTupleSchemeFactory implements SchemeFactory {
      public ProcessStringData_argsTupleScheme getScheme() {
        return new ProcessStringData_argsTupleScheme();
      }
    }

    private static class ProcessStringData_argsTupleScheme extends TupleScheme<ProcessStringData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ProcessStringData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamsList()) {
          optionals.set(0);
        }
        if (struct.isSetInputData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParamsList()) {
          {
            oprot.writeI32(struct.paramsList.size());
            for (Map.Entry<String, String> _iter9 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter9.getKey());
              oprot.writeString(_iter9.getValue());
            }
          }
        }
        if (struct.isSetInputData()) {
          {
            oprot.writeI32(struct.inputData.size());
            for (String _iter10 : struct.inputData)
            {
              oprot.writeString(_iter10);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ProcessStringData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramsList = new HashMap<String,String>(2*_map11.size);
            String _key12;
            String _val13;
            for (int _i14 = 0; _i14 < _map11.size; ++_i14)
            {
              _key12 = iprot.readString();
              _val13 = iprot.readString();
              struct.paramsList.put(_key12, _val13);
            }
          }
          struct.setParamsListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.inputData = new ArrayList<String>(_list15.size);
            String _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readString();
              struct.inputData.add(_elem16);
            }
          }
          struct.setInputDataIsSet(true);
        }
      }
    }

  }

  public static class ProcessStringData_result implements org.apache.thrift.TBase<ProcessStringData_result, ProcessStringData_result._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessStringData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessStringData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ProcessStringData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ProcessStringData_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessStringData_result.class, metaDataMap);
    }

    public ProcessStringData_result() {
    }

    public ProcessStringData_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ProcessStringData_result(ProcessStringData_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public ProcessStringData_result deepCopy() {
      return new ProcessStringData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public ProcessStringData_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ProcessStringData_result)
        return this.equals((ProcessStringData_result)that);
      return false;
    }

    public boolean equals(ProcessStringData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ProcessStringData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ProcessStringData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ProcessStringData_resultStandardSchemeFactory implements SchemeFactory {
      public ProcessStringData_resultStandardScheme getScheme() {
        return new ProcessStringData_resultStandardScheme();
      }
    }

    private static class ProcessStringData_resultStandardScheme extends StandardScheme<ProcessStringData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessStringData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list18.size);
                  String _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    _elem19 = iprot.readString();
                    struct.success.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessStringData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter21 : struct.success)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ProcessStringData_resultTupleSchemeFactory implements SchemeFactory {
      public ProcessStringData_resultTupleScheme getScheme() {
        return new ProcessStringData_resultTupleScheme();
      }
    }

    private static class ProcessStringData_resultTupleScheme extends TupleScheme<ProcessStringData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ProcessStringData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter22 : struct.success)
            {
              oprot.writeString(_iter22);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ProcessStringData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list23.size);
            String _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = iprot.readString();
              struct.success.add(_elem24);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ProcessDoubleData_args implements org.apache.thrift.TBase<ProcessDoubleData_args, ProcessDoubleData_args._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessDoubleData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessDoubleData_args");

    private static final org.apache.thrift.protocol.TField PARAMS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsList", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("inputData", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ProcessDoubleData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ProcessDoubleData_argsTupleSchemeFactory());
    }

    public Map<String,String> paramsList; // required
    public List<String> inputData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS_LIST((short)1, "paramsList"),
      INPUT_DATA((short)2, "inputData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS_LIST
            return PARAMS_LIST;
          case 2: // INPUT_DATA
            return INPUT_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.INPUT_DATA, new org.apache.thrift.meta_data.FieldMetaData("inputData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessDoubleData_args.class, metaDataMap);
    }

    public ProcessDoubleData_args() {
    }

    public ProcessDoubleData_args(
      Map<String,String> paramsList,
      List<String> inputData)
    {
      this();
      this.paramsList = paramsList;
      this.inputData = inputData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ProcessDoubleData_args(ProcessDoubleData_args other) {
      if (other.isSetParamsList()) {
        Map<String,String> __this__paramsList = new HashMap<String,String>(other.paramsList);
        this.paramsList = __this__paramsList;
      }
      if (other.isSetInputData()) {
        List<String> __this__inputData = new ArrayList<String>(other.inputData);
        this.inputData = __this__inputData;
      }
    }

    public ProcessDoubleData_args deepCopy() {
      return new ProcessDoubleData_args(this);
    }

    @Override
    public void clear() {
      this.paramsList = null;
      this.inputData = null;
    }

    public int getParamsListSize() {
      return (this.paramsList == null) ? 0 : this.paramsList.size();
    }

    public void putToParamsList(String key, String val) {
      if (this.paramsList == null) {
        this.paramsList = new HashMap<String,String>();
      }
      this.paramsList.put(key, val);
    }

    public Map<String,String> getParamsList() {
      return this.paramsList;
    }

    public ProcessDoubleData_args setParamsList(Map<String,String> paramsList) {
      this.paramsList = paramsList;
      return this;
    }

    public void unsetParamsList() {
      this.paramsList = null;
    }

    /** Returns true if field paramsList is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsList() {
      return this.paramsList != null;
    }

    public void setParamsListIsSet(boolean value) {
      if (!value) {
        this.paramsList = null;
      }
    }

    public int getInputDataSize() {
      return (this.inputData == null) ? 0 : this.inputData.size();
    }

    public java.util.Iterator<String> getInputDataIterator() {
      return (this.inputData == null) ? null : this.inputData.iterator();
    }

    public void addToInputData(String elem) {
      if (this.inputData == null) {
        this.inputData = new ArrayList<String>();
      }
      this.inputData.add(elem);
    }

    public List<String> getInputData() {
      return this.inputData;
    }

    public ProcessDoubleData_args setInputData(List<String> inputData) {
      this.inputData = inputData;
      return this;
    }

    public void unsetInputData() {
      this.inputData = null;
    }

    /** Returns true if field inputData is set (has been assigned a value) and false otherwise */
    public boolean isSetInputData() {
      return this.inputData != null;
    }

    public void setInputDataIsSet(boolean value) {
      if (!value) {
        this.inputData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS_LIST:
        if (value == null) {
          unsetParamsList();
        } else {
          setParamsList((Map<String,String>)value);
        }
        break;

      case INPUT_DATA:
        if (value == null) {
          unsetInputData();
        } else {
          setInputData((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS_LIST:
        return getParamsList();

      case INPUT_DATA:
        return getInputData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS_LIST:
        return isSetParamsList();
      case INPUT_DATA:
        return isSetInputData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ProcessDoubleData_args)
        return this.equals((ProcessDoubleData_args)that);
      return false;
    }

    public boolean equals(ProcessDoubleData_args that) {
      if (that == null)
        return false;

      boolean this_present_paramsList = true && this.isSetParamsList();
      boolean that_present_paramsList = true && that.isSetParamsList();
      if (this_present_paramsList || that_present_paramsList) {
        if (!(this_present_paramsList && that_present_paramsList))
          return false;
        if (!this.paramsList.equals(that.paramsList))
          return false;
      }

      boolean this_present_inputData = true && this.isSetInputData();
      boolean that_present_inputData = true && that.isSetInputData();
      if (this_present_inputData || that_present_inputData) {
        if (!(this_present_inputData && that_present_inputData))
          return false;
        if (!this.inputData.equals(that.inputData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paramsList = true && (isSetParamsList());
      list.add(present_paramsList);
      if (present_paramsList)
        list.add(paramsList);

      boolean present_inputData = true && (isSetInputData());
      list.add(present_inputData);
      if (present_inputData)
        list.add(inputData);

      return list.hashCode();
    }

    @Override
    public int compareTo(ProcessDoubleData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamsList()).compareTo(other.isSetParamsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsList, other.paramsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputData()).compareTo(other.isSetInputData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputData, other.inputData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ProcessDoubleData_args(");
      boolean first = true;

      sb.append("paramsList:");
      if (this.paramsList == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputData:");
      if (this.inputData == null) {
        sb.append("null");
      } else {
        sb.append(this.inputData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ProcessDoubleData_argsStandardSchemeFactory implements SchemeFactory {
      public ProcessDoubleData_argsStandardScheme getScheme() {
        return new ProcessDoubleData_argsStandardScheme();
      }
    }

    private static class ProcessDoubleData_argsStandardScheme extends StandardScheme<ProcessDoubleData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessDoubleData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                  struct.paramsList = new HashMap<String,String>(2*_map26.size);
                  String _key27;
                  String _val28;
                  for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                  {
                    _key27 = iprot.readString();
                    _val28 = iprot.readString();
                    struct.paramsList.put(_key27, _val28);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                  struct.inputData = new ArrayList<String>(_list30.size);
                  String _elem31;
                  for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                  {
                    _elem31 = iprot.readString();
                    struct.inputData.add(_elem31);
                  }
                  iprot.readListEnd();
                }
                struct.setInputDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessDoubleData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramsList != null) {
          oprot.writeFieldBegin(PARAMS_LIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramsList.size()));
            for (Map.Entry<String, String> _iter33 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter33.getKey());
              oprot.writeString(_iter33.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.inputData != null) {
          oprot.writeFieldBegin(INPUT_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.inputData.size()));
            for (String _iter34 : struct.inputData)
            {
              oprot.writeString(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ProcessDoubleData_argsTupleSchemeFactory implements SchemeFactory {
      public ProcessDoubleData_argsTupleScheme getScheme() {
        return new ProcessDoubleData_argsTupleScheme();
      }
    }

    private static class ProcessDoubleData_argsTupleScheme extends TupleScheme<ProcessDoubleData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ProcessDoubleData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamsList()) {
          optionals.set(0);
        }
        if (struct.isSetInputData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParamsList()) {
          {
            oprot.writeI32(struct.paramsList.size());
            for (Map.Entry<String, String> _iter35 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
        if (struct.isSetInputData()) {
          {
            oprot.writeI32(struct.inputData.size());
            for (String _iter36 : struct.inputData)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ProcessDoubleData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map37 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramsList = new HashMap<String,String>(2*_map37.size);
            String _key38;
            String _val39;
            for (int _i40 = 0; _i40 < _map37.size; ++_i40)
            {
              _key38 = iprot.readString();
              _val39 = iprot.readString();
              struct.paramsList.put(_key38, _val39);
            }
          }
          struct.setParamsListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.inputData = new ArrayList<String>(_list41.size);
            String _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = iprot.readString();
              struct.inputData.add(_elem42);
            }
          }
          struct.setInputDataIsSet(true);
        }
      }
    }

  }

  public static class ProcessDoubleData_result implements org.apache.thrift.TBase<ProcessDoubleData_result, ProcessDoubleData_result._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessDoubleData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessDoubleData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ProcessDoubleData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ProcessDoubleData_resultTupleSchemeFactory());
    }

    public List<Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessDoubleData_result.class, metaDataMap);
    }

    public ProcessDoubleData_result() {
    }

    public ProcessDoubleData_result(
      List<Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ProcessDoubleData_result(ProcessDoubleData_result other) {
      if (other.isSetSuccess()) {
        List<Double> __this__success = new ArrayList<Double>(other.success);
        this.success = __this__success;
      }
    }

    public ProcessDoubleData_result deepCopy() {
      return new ProcessDoubleData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new ArrayList<Double>();
      }
      this.success.add(elem);
    }

    public List<Double> getSuccess() {
      return this.success;
    }

    public ProcessDoubleData_result setSuccess(List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ProcessDoubleData_result)
        return this.equals((ProcessDoubleData_result)that);
      return false;
    }

    public boolean equals(ProcessDoubleData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ProcessDoubleData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ProcessDoubleData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ProcessDoubleData_resultStandardSchemeFactory implements SchemeFactory {
      public ProcessDoubleData_resultStandardScheme getScheme() {
        return new ProcessDoubleData_resultStandardScheme();
      }
    }

    private static class ProcessDoubleData_resultStandardScheme extends StandardScheme<ProcessDoubleData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessDoubleData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.success = new ArrayList<Double>(_list44.size);
                  double _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = iprot.readDouble();
                    struct.success.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessDoubleData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter47 : struct.success)
            {
              oprot.writeDouble(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ProcessDoubleData_resultTupleSchemeFactory implements SchemeFactory {
      public ProcessDoubleData_resultTupleScheme getScheme() {
        return new ProcessDoubleData_resultTupleScheme();
      }
    }

    private static class ProcessDoubleData_resultTupleScheme extends TupleScheme<ProcessDoubleData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ProcessDoubleData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter48 : struct.success)
            {
              oprot.writeDouble(_iter48);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ProcessDoubleData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new ArrayList<Double>(_list49.size);
            double _elem50;
            for (int _i51 = 0; _i51 < _list49.size; ++_i51)
            {
              _elem50 = iprot.readDouble();
              struct.success.add(_elem50);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsServerActive_args implements org.apache.thrift.TBase<IsServerActive_args, IsServerActive_args._Fields>, java.io.Serializable, Cloneable, Comparable<IsServerActive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsServerActive_args");

    private static final org.apache.thrift.protocol.TField PARAMS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsList", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsServerActive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsServerActive_argsTupleSchemeFactory());
    }

    public Map<String,String> paramsList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS_LIST((short)1, "paramsList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS_LIST
            return PARAMS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsServerActive_args.class, metaDataMap);
    }

    public IsServerActive_args() {
    }

    public IsServerActive_args(
      Map<String,String> paramsList)
    {
      this();
      this.paramsList = paramsList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsServerActive_args(IsServerActive_args other) {
      if (other.isSetParamsList()) {
        Map<String,String> __this__paramsList = new HashMap<String,String>(other.paramsList);
        this.paramsList = __this__paramsList;
      }
    }

    public IsServerActive_args deepCopy() {
      return new IsServerActive_args(this);
    }

    @Override
    public void clear() {
      this.paramsList = null;
    }

    public int getParamsListSize() {
      return (this.paramsList == null) ? 0 : this.paramsList.size();
    }

    public void putToParamsList(String key, String val) {
      if (this.paramsList == null) {
        this.paramsList = new HashMap<String,String>();
      }
      this.paramsList.put(key, val);
    }

    public Map<String,String> getParamsList() {
      return this.paramsList;
    }

    public IsServerActive_args setParamsList(Map<String,String> paramsList) {
      this.paramsList = paramsList;
      return this;
    }

    public void unsetParamsList() {
      this.paramsList = null;
    }

    /** Returns true if field paramsList is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsList() {
      return this.paramsList != null;
    }

    public void setParamsListIsSet(boolean value) {
      if (!value) {
        this.paramsList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS_LIST:
        if (value == null) {
          unsetParamsList();
        } else {
          setParamsList((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS_LIST:
        return getParamsList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS_LIST:
        return isSetParamsList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsServerActive_args)
        return this.equals((IsServerActive_args)that);
      return false;
    }

    public boolean equals(IsServerActive_args that) {
      if (that == null)
        return false;

      boolean this_present_paramsList = true && this.isSetParamsList();
      boolean that_present_paramsList = true && that.isSetParamsList();
      if (this_present_paramsList || that_present_paramsList) {
        if (!(this_present_paramsList && that_present_paramsList))
          return false;
        if (!this.paramsList.equals(that.paramsList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paramsList = true && (isSetParamsList());
      list.add(present_paramsList);
      if (present_paramsList)
        list.add(paramsList);

      return list.hashCode();
    }

    @Override
    public int compareTo(IsServerActive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamsList()).compareTo(other.isSetParamsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsList, other.paramsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsServerActive_args(");
      boolean first = true;

      sb.append("paramsList:");
      if (this.paramsList == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsServerActive_argsStandardSchemeFactory implements SchemeFactory {
      public IsServerActive_argsStandardScheme getScheme() {
        return new IsServerActive_argsStandardScheme();
      }
    }

    private static class IsServerActive_argsStandardScheme extends StandardScheme<IsServerActive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsServerActive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                  struct.paramsList = new HashMap<String,String>(2*_map52.size);
                  String _key53;
                  String _val54;
                  for (int _i55 = 0; _i55 < _map52.size; ++_i55)
                  {
                    _key53 = iprot.readString();
                    _val54 = iprot.readString();
                    struct.paramsList.put(_key53, _val54);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsServerActive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramsList != null) {
          oprot.writeFieldBegin(PARAMS_LIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramsList.size()));
            for (Map.Entry<String, String> _iter56 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter56.getKey());
              oprot.writeString(_iter56.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsServerActive_argsTupleSchemeFactory implements SchemeFactory {
      public IsServerActive_argsTupleScheme getScheme() {
        return new IsServerActive_argsTupleScheme();
      }
    }

    private static class IsServerActive_argsTupleScheme extends TupleScheme<IsServerActive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsServerActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamsList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamsList()) {
          {
            oprot.writeI32(struct.paramsList.size());
            for (Map.Entry<String, String> _iter57 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter57.getKey());
              oprot.writeString(_iter57.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsServerActive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramsList = new HashMap<String,String>(2*_map58.size);
            String _key59;
            String _val60;
            for (int _i61 = 0; _i61 < _map58.size; ++_i61)
            {
              _key59 = iprot.readString();
              _val60 = iprot.readString();
              struct.paramsList.put(_key59, _val60);
            }
          }
          struct.setParamsListIsSet(true);
        }
      }
    }

  }

  public static class IsServerActive_result implements org.apache.thrift.TBase<IsServerActive_result, IsServerActive_result._Fields>, java.io.Serializable, Cloneable, Comparable<IsServerActive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsServerActive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsServerActive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsServerActive_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsServerActive_result.class, metaDataMap);
    }

    public IsServerActive_result() {
    }

    public IsServerActive_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsServerActive_result(IsServerActive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public IsServerActive_result deepCopy() {
      return new IsServerActive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public IsServerActive_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsServerActive_result)
        return this.equals((IsServerActive_result)that);
      return false;
    }

    public boolean equals(IsServerActive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(IsServerActive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsServerActive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsServerActive_resultStandardSchemeFactory implements SchemeFactory {
      public IsServerActive_resultStandardScheme getScheme() {
        return new IsServerActive_resultStandardScheme();
      }
    }

    private static class IsServerActive_resultStandardScheme extends StandardScheme<IsServerActive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsServerActive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsServerActive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsServerActive_resultTupleSchemeFactory implements SchemeFactory {
      public IsServerActive_resultTupleScheme getScheme() {
        return new IsServerActive_resultTupleScheme();
      }
    }

    private static class IsServerActive_resultTupleScheme extends TupleScheme<IsServerActive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsServerActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsServerActive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class PostStatusMessage_args implements org.apache.thrift.TBase<PostStatusMessage_args, PostStatusMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<PostStatusMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PostStatusMessage_args");

    private static final org.apache.thrift.protocol.TField PARAMS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsList", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PostStatusMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PostStatusMessage_argsTupleSchemeFactory());
    }

    public Map<String,String> paramsList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS_LIST((short)1, "paramsList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS_LIST
            return PARAMS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PostStatusMessage_args.class, metaDataMap);
    }

    public PostStatusMessage_args() {
    }

    public PostStatusMessage_args(
      Map<String,String> paramsList)
    {
      this();
      this.paramsList = paramsList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PostStatusMessage_args(PostStatusMessage_args other) {
      if (other.isSetParamsList()) {
        Map<String,String> __this__paramsList = new HashMap<String,String>(other.paramsList);
        this.paramsList = __this__paramsList;
      }
    }

    public PostStatusMessage_args deepCopy() {
      return new PostStatusMessage_args(this);
    }

    @Override
    public void clear() {
      this.paramsList = null;
    }

    public int getParamsListSize() {
      return (this.paramsList == null) ? 0 : this.paramsList.size();
    }

    public void putToParamsList(String key, String val) {
      if (this.paramsList == null) {
        this.paramsList = new HashMap<String,String>();
      }
      this.paramsList.put(key, val);
    }

    public Map<String,String> getParamsList() {
      return this.paramsList;
    }

    public PostStatusMessage_args setParamsList(Map<String,String> paramsList) {
      this.paramsList = paramsList;
      return this;
    }

    public void unsetParamsList() {
      this.paramsList = null;
    }

    /** Returns true if field paramsList is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsList() {
      return this.paramsList != null;
    }

    public void setParamsListIsSet(boolean value) {
      if (!value) {
        this.paramsList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS_LIST:
        if (value == null) {
          unsetParamsList();
        } else {
          setParamsList((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS_LIST:
        return getParamsList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS_LIST:
        return isSetParamsList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PostStatusMessage_args)
        return this.equals((PostStatusMessage_args)that);
      return false;
    }

    public boolean equals(PostStatusMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_paramsList = true && this.isSetParamsList();
      boolean that_present_paramsList = true && that.isSetParamsList();
      if (this_present_paramsList || that_present_paramsList) {
        if (!(this_present_paramsList && that_present_paramsList))
          return false;
        if (!this.paramsList.equals(that.paramsList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paramsList = true && (isSetParamsList());
      list.add(present_paramsList);
      if (present_paramsList)
        list.add(paramsList);

      return list.hashCode();
    }

    @Override
    public int compareTo(PostStatusMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParamsList()).compareTo(other.isSetParamsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsList, other.paramsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PostStatusMessage_args(");
      boolean first = true;

      sb.append("paramsList:");
      if (this.paramsList == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PostStatusMessage_argsStandardSchemeFactory implements SchemeFactory {
      public PostStatusMessage_argsStandardScheme getScheme() {
        return new PostStatusMessage_argsStandardScheme();
      }
    }

    private static class PostStatusMessage_argsStandardScheme extends StandardScheme<PostStatusMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PostStatusMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map62 = iprot.readMapBegin();
                  struct.paramsList = new HashMap<String,String>(2*_map62.size);
                  String _key63;
                  String _val64;
                  for (int _i65 = 0; _i65 < _map62.size; ++_i65)
                  {
                    _key63 = iprot.readString();
                    _val64 = iprot.readString();
                    struct.paramsList.put(_key63, _val64);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PostStatusMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramsList != null) {
          oprot.writeFieldBegin(PARAMS_LIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramsList.size()));
            for (Map.Entry<String, String> _iter66 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter66.getKey());
              oprot.writeString(_iter66.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PostStatusMessage_argsTupleSchemeFactory implements SchemeFactory {
      public PostStatusMessage_argsTupleScheme getScheme() {
        return new PostStatusMessage_argsTupleScheme();
      }
    }

    private static class PostStatusMessage_argsTupleScheme extends TupleScheme<PostStatusMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PostStatusMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamsList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParamsList()) {
          {
            oprot.writeI32(struct.paramsList.size());
            for (Map.Entry<String, String> _iter67 : struct.paramsList.entrySet())
            {
              oprot.writeString(_iter67.getKey());
              oprot.writeString(_iter67.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PostStatusMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map68 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramsList = new HashMap<String,String>(2*_map68.size);
            String _key69;
            String _val70;
            for (int _i71 = 0; _i71 < _map68.size; ++_i71)
            {
              _key69 = iprot.readString();
              _val70 = iprot.readString();
              struct.paramsList.put(_key69, _val70);
            }
          }
          struct.setParamsListIsSet(true);
        }
      }
    }

  }

}
