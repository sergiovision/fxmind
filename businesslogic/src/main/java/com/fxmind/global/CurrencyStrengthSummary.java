/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fxmind.global;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

//import javax.annotation.processing.Generated;
import javax.annotation.Generated;

import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-5-29")
public class CurrencyStrengthSummary implements org.apache.thrift.TBase<CurrencyStrengthSummary, CurrencyStrengthSummary._Fields>, java.io.Serializable, Cloneable, Comparable<CurrencyStrengthSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CurrencyStrengthSummary");

  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("Currency", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MIN1_FIELD_DESC = new org.apache.thrift.protocol.TField("Min1", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MIN5_FIELD_DESC = new org.apache.thrift.protocol.TField("Min5", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MIN15_FIELD_DESC = new org.apache.thrift.protocol.TField("Min15", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MIN30_FIELD_DESC = new org.apache.thrift.protocol.TField("Min30", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField HOURLY_FIELD_DESC = new org.apache.thrift.protocol.TField("Hourly", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField HOURLY5_FIELD_DESC = new org.apache.thrift.protocol.TField("Hourly5", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DAILY_FIELD_DESC = new org.apache.thrift.protocol.TField("Daily", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MONTHLY_FIELD_DESC = new org.apache.thrift.protocol.TField("Monthly", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CurrencyStrengthSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CurrencyStrengthSummaryTupleSchemeFactory());
  }

  public String Currency; // required
  public double Min1; // required
  public double Min5; // required
  public double Min15; // required
  public double Min30; // required
  public double Hourly; // required
  public double Hourly5; // required
  public double Daily; // required
  public double Monthly; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENCY((short)1, "Currency"),
    MIN1((short)2, "Min1"),
    MIN5((short)3, "Min5"),
    MIN15((short)4, "Min15"),
    MIN30((short)5, "Min30"),
    HOURLY((short)6, "Hourly"),
    HOURLY5((short)7, "Hourly5"),
    DAILY((short)8, "Daily"),
    MONTHLY((short)9, "Monthly");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENCY
          return CURRENCY;
        case 2: // MIN1
          return MIN1;
        case 3: // MIN5
          return MIN5;
        case 4: // MIN15
          return MIN15;
        case 5: // MIN30
          return MIN30;
        case 6: // HOURLY
          return HOURLY;
        case 7: // HOURLY5
          return HOURLY5;
        case 8: // DAILY
          return DAILY;
        case 9: // MONTHLY
          return MONTHLY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN1_ISSET_ID = 0;
  private static final int __MIN5_ISSET_ID = 1;
  private static final int __MIN15_ISSET_ID = 2;
  private static final int __MIN30_ISSET_ID = 3;
  private static final int __HOURLY_ISSET_ID = 4;
  private static final int __HOURLY5_ISSET_ID = 5;
  private static final int __DAILY_ISSET_ID = 6;
  private static final int __MONTHLY_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("Currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN1, new org.apache.thrift.meta_data.FieldMetaData("Min1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN5, new org.apache.thrift.meta_data.FieldMetaData("Min5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN15, new org.apache.thrift.meta_data.FieldMetaData("Min15", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN30, new org.apache.thrift.meta_data.FieldMetaData("Min30", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOURLY, new org.apache.thrift.meta_data.FieldMetaData("Hourly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOURLY5, new org.apache.thrift.meta_data.FieldMetaData("Hourly5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAILY, new org.apache.thrift.meta_data.FieldMetaData("Daily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTHLY, new org.apache.thrift.meta_data.FieldMetaData("Monthly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CurrencyStrengthSummary.class, metaDataMap);
  }

  public CurrencyStrengthSummary() {
  }

  public CurrencyStrengthSummary(
    String Currency,
    double Min1,
    double Min5,
    double Min15,
    double Min30,
    double Hourly,
    double Hourly5,
    double Daily,
    double Monthly)
  {
    this();
    this.Currency = Currency;
    this.Min1 = Min1;
    setMin1IsSet(true);
    this.Min5 = Min5;
    setMin5IsSet(true);
    this.Min15 = Min15;
    setMin15IsSet(true);
    this.Min30 = Min30;
    setMin30IsSet(true);
    this.Hourly = Hourly;
    setHourlyIsSet(true);
    this.Hourly5 = Hourly5;
    setHourly5IsSet(true);
    this.Daily = Daily;
    setDailyIsSet(true);
    this.Monthly = Monthly;
    setMonthlyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CurrencyStrengthSummary(CurrencyStrengthSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCurrency()) {
      this.Currency = other.Currency;
    }
    this.Min1 = other.Min1;
    this.Min5 = other.Min5;
    this.Min15 = other.Min15;
    this.Min30 = other.Min30;
    this.Hourly = other.Hourly;
    this.Hourly5 = other.Hourly5;
    this.Daily = other.Daily;
    this.Monthly = other.Monthly;
  }

  public CurrencyStrengthSummary deepCopy() {
    return new CurrencyStrengthSummary(this);
  }

  @Override
  public void clear() {
    this.Currency = null;
    setMin1IsSet(false);
    this.Min1 = 0.0;
    setMin5IsSet(false);
    this.Min5 = 0.0;
    setMin15IsSet(false);
    this.Min15 = 0.0;
    setMin30IsSet(false);
    this.Min30 = 0.0;
    setHourlyIsSet(false);
    this.Hourly = 0.0;
    setHourly5IsSet(false);
    this.Hourly5 = 0.0;
    setDailyIsSet(false);
    this.Daily = 0.0;
    setMonthlyIsSet(false);
    this.Monthly = 0.0;
  }

  public String getCurrency() {
    return this.Currency;
  }

  public CurrencyStrengthSummary setCurrency(String Currency) {
    this.Currency = Currency;
    return this;
  }

  public void unsetCurrency() {
    this.Currency = null;
  }

  /** Returns true if field Currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.Currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.Currency = null;
    }
  }

  public double getMin1() {
    return this.Min1;
  }

  public CurrencyStrengthSummary setMin1(double Min1) {
    this.Min1 = Min1;
    setMin1IsSet(true);
    return this;
  }

  public void unsetMin1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN1_ISSET_ID);
  }

  /** Returns true if field Min1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMin1() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN1_ISSET_ID);
  }

  public void setMin1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN1_ISSET_ID, value);
  }

  public double getMin5() {
    return this.Min5;
  }

  public CurrencyStrengthSummary setMin5(double Min5) {
    this.Min5 = Min5;
    setMin5IsSet(true);
    return this;
  }

  public void unsetMin5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN5_ISSET_ID);
  }

  /** Returns true if field Min5 is set (has been assigned a value) and false otherwise */
  public boolean isSetMin5() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN5_ISSET_ID);
  }

  public void setMin5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN5_ISSET_ID, value);
  }

  public double getMin15() {
    return this.Min15;
  }

  public CurrencyStrengthSummary setMin15(double Min15) {
    this.Min15 = Min15;
    setMin15IsSet(true);
    return this;
  }

  public void unsetMin15() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN15_ISSET_ID);
  }

  /** Returns true if field Min15 is set (has been assigned a value) and false otherwise */
  public boolean isSetMin15() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN15_ISSET_ID);
  }

  public void setMin15IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN15_ISSET_ID, value);
  }

  public double getMin30() {
    return this.Min30;
  }

  public CurrencyStrengthSummary setMin30(double Min30) {
    this.Min30 = Min30;
    setMin30IsSet(true);
    return this;
  }

  public void unsetMin30() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN30_ISSET_ID);
  }

  /** Returns true if field Min30 is set (has been assigned a value) and false otherwise */
  public boolean isSetMin30() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN30_ISSET_ID);
  }

  public void setMin30IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN30_ISSET_ID, value);
  }

  public double getHourly() {
    return this.Hourly;
  }

  public CurrencyStrengthSummary setHourly(double Hourly) {
    this.Hourly = Hourly;
    setHourlyIsSet(true);
    return this;
  }

  public void unsetHourly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOURLY_ISSET_ID);
  }

  /** Returns true if field Hourly is set (has been assigned a value) and false otherwise */
  public boolean isSetHourly() {
    return EncodingUtils.testBit(__isset_bitfield, __HOURLY_ISSET_ID);
  }

  public void setHourlyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOURLY_ISSET_ID, value);
  }

  public double getHourly5() {
    return this.Hourly5;
  }

  public CurrencyStrengthSummary setHourly5(double Hourly5) {
    this.Hourly5 = Hourly5;
    setHourly5IsSet(true);
    return this;
  }

  public void unsetHourly5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOURLY5_ISSET_ID);
  }

  /** Returns true if field Hourly5 is set (has been assigned a value) and false otherwise */
  public boolean isSetHourly5() {
    return EncodingUtils.testBit(__isset_bitfield, __HOURLY5_ISSET_ID);
  }

  public void setHourly5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOURLY5_ISSET_ID, value);
  }

  public double getDaily() {
    return this.Daily;
  }

  public CurrencyStrengthSummary setDaily(double Daily) {
    this.Daily = Daily;
    setDailyIsSet(true);
    return this;
  }

  public void unsetDaily() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAILY_ISSET_ID);
  }

  /** Returns true if field Daily is set (has been assigned a value) and false otherwise */
  public boolean isSetDaily() {
    return EncodingUtils.testBit(__isset_bitfield, __DAILY_ISSET_ID);
  }

  public void setDailyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAILY_ISSET_ID, value);
  }

  public double getMonthly() {
    return this.Monthly;
  }

  public CurrencyStrengthSummary setMonthly(double Monthly) {
    this.Monthly = Monthly;
    setMonthlyIsSet(true);
    return this;
  }

  public void unsetMonthly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLY_ISSET_ID);
  }

  /** Returns true if field Monthly is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthly() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLY_ISSET_ID);
  }

  public void setMonthlyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case MIN1:
      if (value == null) {
        unsetMin1();
      } else {
        setMin1((Double)value);
      }
      break;

    case MIN5:
      if (value == null) {
        unsetMin5();
      } else {
        setMin5((Double)value);
      }
      break;

    case MIN15:
      if (value == null) {
        unsetMin15();
      } else {
        setMin15((Double)value);
      }
      break;

    case MIN30:
      if (value == null) {
        unsetMin30();
      } else {
        setMin30((Double)value);
      }
      break;

    case HOURLY:
      if (value == null) {
        unsetHourly();
      } else {
        setHourly((Double)value);
      }
      break;

    case HOURLY5:
      if (value == null) {
        unsetHourly5();
      } else {
        setHourly5((Double)value);
      }
      break;

    case DAILY:
      if (value == null) {
        unsetDaily();
      } else {
        setDaily((Double)value);
      }
      break;

    case MONTHLY:
      if (value == null) {
        unsetMonthly();
      } else {
        setMonthly((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENCY:
      return getCurrency();

    case MIN1:
      return Double.valueOf(getMin1());

    case MIN5:
      return Double.valueOf(getMin5());

    case MIN15:
      return Double.valueOf(getMin15());

    case MIN30:
      return Double.valueOf(getMin30());

    case HOURLY:
      return Double.valueOf(getHourly());

    case HOURLY5:
      return Double.valueOf(getHourly5());

    case DAILY:
      return Double.valueOf(getDaily());

    case MONTHLY:
      return Double.valueOf(getMonthly());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENCY:
      return isSetCurrency();
    case MIN1:
      return isSetMin1();
    case MIN5:
      return isSetMin5();
    case MIN15:
      return isSetMin15();
    case MIN30:
      return isSetMin30();
    case HOURLY:
      return isSetHourly();
    case HOURLY5:
      return isSetHourly5();
    case DAILY:
      return isSetDaily();
    case MONTHLY:
      return isSetMonthly();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CurrencyStrengthSummary)
      return this.equals((CurrencyStrengthSummary)that);
    return false;
  }

  public boolean equals(CurrencyStrengthSummary that) {
    if (that == null)
      return false;

    boolean this_present_Currency = true && this.isSetCurrency();
    boolean that_present_Currency = true && that.isSetCurrency();
    if (this_present_Currency || that_present_Currency) {
      if (!(this_present_Currency && that_present_Currency))
        return false;
      if (!this.Currency.equals(that.Currency))
        return false;
    }

    boolean this_present_Min1 = true;
    boolean that_present_Min1 = true;
    if (this_present_Min1 || that_present_Min1) {
      if (!(this_present_Min1 && that_present_Min1))
        return false;
      if (this.Min1 != that.Min1)
        return false;
    }

    boolean this_present_Min5 = true;
    boolean that_present_Min5 = true;
    if (this_present_Min5 || that_present_Min5) {
      if (!(this_present_Min5 && that_present_Min5))
        return false;
      if (this.Min5 != that.Min5)
        return false;
    }

    boolean this_present_Min15 = true;
    boolean that_present_Min15 = true;
    if (this_present_Min15 || that_present_Min15) {
      if (!(this_present_Min15 && that_present_Min15))
        return false;
      if (this.Min15 != that.Min15)
        return false;
    }

    boolean this_present_Min30 = true;
    boolean that_present_Min30 = true;
    if (this_present_Min30 || that_present_Min30) {
      if (!(this_present_Min30 && that_present_Min30))
        return false;
      if (this.Min30 != that.Min30)
        return false;
    }

    boolean this_present_Hourly = true;
    boolean that_present_Hourly = true;
    if (this_present_Hourly || that_present_Hourly) {
      if (!(this_present_Hourly && that_present_Hourly))
        return false;
      if (this.Hourly != that.Hourly)
        return false;
    }

    boolean this_present_Hourly5 = true;
    boolean that_present_Hourly5 = true;
    if (this_present_Hourly5 || that_present_Hourly5) {
      if (!(this_present_Hourly5 && that_present_Hourly5))
        return false;
      if (this.Hourly5 != that.Hourly5)
        return false;
    }

    boolean this_present_Daily = true;
    boolean that_present_Daily = true;
    if (this_present_Daily || that_present_Daily) {
      if (!(this_present_Daily && that_present_Daily))
        return false;
      if (this.Daily != that.Daily)
        return false;
    }

    boolean this_present_Monthly = true;
    boolean that_present_Monthly = true;
    if (this_present_Monthly || that_present_Monthly) {
      if (!(this_present_Monthly && that_present_Monthly))
        return false;
      if (this.Monthly != that.Monthly)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Currency = true && (isSetCurrency());
    list.add(present_Currency);
    if (present_Currency)
      list.add(Currency);

    boolean present_Min1 = true;
    list.add(present_Min1);
    if (present_Min1)
      list.add(Min1);

    boolean present_Min5 = true;
    list.add(present_Min5);
    if (present_Min5)
      list.add(Min5);

    boolean present_Min15 = true;
    list.add(present_Min15);
    if (present_Min15)
      list.add(Min15);

    boolean present_Min30 = true;
    list.add(present_Min30);
    if (present_Min30)
      list.add(Min30);

    boolean present_Hourly = true;
    list.add(present_Hourly);
    if (present_Hourly)
      list.add(Hourly);

    boolean present_Hourly5 = true;
    list.add(present_Hourly5);
    if (present_Hourly5)
      list.add(Hourly5);

    boolean present_Daily = true;
    list.add(present_Daily);
    if (present_Daily)
      list.add(Daily);

    boolean present_Monthly = true;
    list.add(present_Monthly);
    if (present_Monthly)
      list.add(Monthly);

    return list.hashCode();
  }

  @Override
  public int compareTo(CurrencyStrengthSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Currency, other.Currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin1()).compareTo(other.isSetMin1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Min1, other.Min1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin5()).compareTo(other.isSetMin5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Min5, other.Min5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin15()).compareTo(other.isSetMin15());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin15()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Min15, other.Min15);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin30()).compareTo(other.isSetMin30());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin30()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Min30, other.Min30);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHourly()).compareTo(other.isSetHourly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHourly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Hourly, other.Hourly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHourly5()).compareTo(other.isSetHourly5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHourly5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Hourly5, other.Hourly5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDaily()).compareTo(other.isSetDaily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDaily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Daily, other.Daily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthly()).compareTo(other.isSetMonthly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Monthly, other.Monthly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CurrencyStrengthSummary(");
    boolean first = true;

    sb.append("Currency:");
    if (this.Currency == null) {
      sb.append("null");
    } else {
      sb.append(this.Currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Min1:");
    sb.append(this.Min1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Min5:");
    sb.append(this.Min5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Min15:");
    sb.append(this.Min15);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Min30:");
    sb.append(this.Min30);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Hourly:");
    sb.append(this.Hourly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Hourly5:");
    sb.append(this.Hourly5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Daily:");
    sb.append(this.Daily);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Monthly:");
    sb.append(this.Monthly);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CurrencyStrengthSummaryStandardSchemeFactory implements SchemeFactory {
    public CurrencyStrengthSummaryStandardScheme getScheme() {
      return new CurrencyStrengthSummaryStandardScheme();
    }
  }

  private static class CurrencyStrengthSummaryStandardScheme extends StandardScheme<CurrencyStrengthSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CurrencyStrengthSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Min1 = iprot.readDouble();
              struct.setMin1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Min5 = iprot.readDouble();
              struct.setMin5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN15
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Min15 = iprot.readDouble();
              struct.setMin15IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN30
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Min30 = iprot.readDouble();
              struct.setMin30IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOURLY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Hourly = iprot.readDouble();
              struct.setHourlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOURLY5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Hourly5 = iprot.readDouble();
              struct.setHourly5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DAILY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Daily = iprot.readDouble();
              struct.setDailyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MONTHLY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Monthly = iprot.readDouble();
              struct.setMonthlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CurrencyStrengthSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.Currency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN1_FIELD_DESC);
      oprot.writeDouble(struct.Min1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN5_FIELD_DESC);
      oprot.writeDouble(struct.Min5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN15_FIELD_DESC);
      oprot.writeDouble(struct.Min15);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN30_FIELD_DESC);
      oprot.writeDouble(struct.Min30);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOURLY_FIELD_DESC);
      oprot.writeDouble(struct.Hourly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOURLY5_FIELD_DESC);
      oprot.writeDouble(struct.Hourly5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAILY_FIELD_DESC);
      oprot.writeDouble(struct.Daily);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTHLY_FIELD_DESC);
      oprot.writeDouble(struct.Monthly);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CurrencyStrengthSummaryTupleSchemeFactory implements SchemeFactory {
    public CurrencyStrengthSummaryTupleScheme getScheme() {
      return new CurrencyStrengthSummaryTupleScheme();
    }
  }

  private static class CurrencyStrengthSummaryTupleScheme extends TupleScheme<CurrencyStrengthSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CurrencyStrengthSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrency()) {
        optionals.set(0);
      }
      if (struct.isSetMin1()) {
        optionals.set(1);
      }
      if (struct.isSetMin5()) {
        optionals.set(2);
      }
      if (struct.isSetMin15()) {
        optionals.set(3);
      }
      if (struct.isSetMin30()) {
        optionals.set(4);
      }
      if (struct.isSetHourly()) {
        optionals.set(5);
      }
      if (struct.isSetHourly5()) {
        optionals.set(6);
      }
      if (struct.isSetDaily()) {
        optionals.set(7);
      }
      if (struct.isSetMonthly()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.Currency);
      }
      if (struct.isSetMin1()) {
        oprot.writeDouble(struct.Min1);
      }
      if (struct.isSetMin5()) {
        oprot.writeDouble(struct.Min5);
      }
      if (struct.isSetMin15()) {
        oprot.writeDouble(struct.Min15);
      }
      if (struct.isSetMin30()) {
        oprot.writeDouble(struct.Min30);
      }
      if (struct.isSetHourly()) {
        oprot.writeDouble(struct.Hourly);
      }
      if (struct.isSetHourly5()) {
        oprot.writeDouble(struct.Hourly5);
      }
      if (struct.isSetDaily()) {
        oprot.writeDouble(struct.Daily);
      }
      if (struct.isSetMonthly()) {
        oprot.writeDouble(struct.Monthly);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CurrencyStrengthSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.Currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Min1 = iprot.readDouble();
        struct.setMin1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.Min5 = iprot.readDouble();
        struct.setMin5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.Min15 = iprot.readDouble();
        struct.setMin15IsSet(true);
      }
      if (incoming.get(4)) {
        struct.Min30 = iprot.readDouble();
        struct.setMin30IsSet(true);
      }
      if (incoming.get(5)) {
        struct.Hourly = iprot.readDouble();
        struct.setHourlyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Hourly5 = iprot.readDouble();
        struct.setHourly5IsSet(true);
      }
      if (incoming.get(7)) {
        struct.Daily = iprot.readDouble();
        struct.setDailyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.Monthly = iprot.readDouble();
        struct.setMonthlyIsSet(true);
      }
    }
  }

}

