/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fxmind.global;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

//import javax.annotation.processing.Generated;
import javax.annotation.Generated;

import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-5-29")
public class NewsEventInfo implements org.apache.thrift.TBase<NewsEventInfo, NewsEventInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NewsEventInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewsEventInfo");

  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("Currency", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMPORTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("Importance", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField RAISE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("RaiseDateTime", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NewsEventInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NewsEventInfoTupleSchemeFactory());
  }

  public String Currency; // required
  public String Name; // required
  public byte Importance; // required
  public String RaiseDateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENCY((short)1, "Currency"),
    NAME((short)2, "Name"),
    IMPORTANCE((short)3, "Importance"),
    RAISE_DATE_TIME((short)4, "RaiseDateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENCY
          return CURRENCY;
        case 2: // NAME
          return NAME;
        case 3: // IMPORTANCE
          return IMPORTANCE;
        case 4: // RAISE_DATE_TIME
          return RAISE_DATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IMPORTANCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("Currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPORTANCE, new org.apache.thrift.meta_data.FieldMetaData("Importance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RAISE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("RaiseDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewsEventInfo.class, metaDataMap);
  }

  public NewsEventInfo() {
  }

  public NewsEventInfo(
    String Currency,
    String Name,
    byte Importance,
    String RaiseDateTime)
  {
    this();
    this.Currency = Currency;
    this.Name = Name;
    this.Importance = Importance;
    setImportanceIsSet(true);
    this.RaiseDateTime = RaiseDateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NewsEventInfo(NewsEventInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCurrency()) {
      this.Currency = other.Currency;
    }
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    this.Importance = other.Importance;
    if (other.isSetRaiseDateTime()) {
      this.RaiseDateTime = other.RaiseDateTime;
    }
  }

  public NewsEventInfo deepCopy() {
    return new NewsEventInfo(this);
  }

  @Override
  public void clear() {
    this.Currency = null;
    this.Name = null;
    setImportanceIsSet(false);
    this.Importance = 0;
    this.RaiseDateTime = null;
  }

  public String getCurrency() {
    return this.Currency;
  }

  public NewsEventInfo setCurrency(String Currency) {
    this.Currency = Currency;
    return this;
  }

  public void unsetCurrency() {
    this.Currency = null;
  }

  /** Returns true if field Currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.Currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.Currency = null;
    }
  }

  public String getName() {
    return this.Name;
  }

  public NewsEventInfo setName(String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public byte getImportance() {
    return this.Importance;
  }

  public NewsEventInfo setImportance(byte Importance) {
    this.Importance = Importance;
    setImportanceIsSet(true);
    return this;
  }

  public void unsetImportance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMPORTANCE_ISSET_ID);
  }

  /** Returns true if field Importance is set (has been assigned a value) and false otherwise */
  public boolean isSetImportance() {
    return EncodingUtils.testBit(__isset_bitfield, __IMPORTANCE_ISSET_ID);
  }

  public void setImportanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMPORTANCE_ISSET_ID, value);
  }

  public String getRaiseDateTime() {
    return this.RaiseDateTime;
  }

  public NewsEventInfo setRaiseDateTime(String RaiseDateTime) {
    this.RaiseDateTime = RaiseDateTime;
    return this;
  }

  public void unsetRaiseDateTime() {
    this.RaiseDateTime = null;
  }

  /** Returns true if field RaiseDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRaiseDateTime() {
    return this.RaiseDateTime != null;
  }

  public void setRaiseDateTimeIsSet(boolean value) {
    if (!value) {
      this.RaiseDateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IMPORTANCE:
      if (value == null) {
        unsetImportance();
      } else {
        setImportance((Byte)value);
      }
      break;

    case RAISE_DATE_TIME:
      if (value == null) {
        unsetRaiseDateTime();
      } else {
        setRaiseDateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENCY:
      return getCurrency();

    case NAME:
      return getName();

    case IMPORTANCE:
      return Byte.valueOf(getImportance());

    case RAISE_DATE_TIME:
      return getRaiseDateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENCY:
      return isSetCurrency();
    case NAME:
      return isSetName();
    case IMPORTANCE:
      return isSetImportance();
    case RAISE_DATE_TIME:
      return isSetRaiseDateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NewsEventInfo)
      return this.equals((NewsEventInfo)that);
    return false;
  }

  public boolean equals(NewsEventInfo that) {
    if (that == null)
      return false;

    boolean this_present_Currency = true && this.isSetCurrency();
    boolean that_present_Currency = true && that.isSetCurrency();
    if (this_present_Currency || that_present_Currency) {
      if (!(this_present_Currency && that_present_Currency))
        return false;
      if (!this.Currency.equals(that.Currency))
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Importance = true;
    boolean that_present_Importance = true;
    if (this_present_Importance || that_present_Importance) {
      if (!(this_present_Importance && that_present_Importance))
        return false;
      if (this.Importance != that.Importance)
        return false;
    }

    boolean this_present_RaiseDateTime = true && this.isSetRaiseDateTime();
    boolean that_present_RaiseDateTime = true && that.isSetRaiseDateTime();
    if (this_present_RaiseDateTime || that_present_RaiseDateTime) {
      if (!(this_present_RaiseDateTime && that_present_RaiseDateTime))
        return false;
      if (!this.RaiseDateTime.equals(that.RaiseDateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Currency = true && (isSetCurrency());
    list.add(present_Currency);
    if (present_Currency)
      list.add(Currency);

    boolean present_Name = true && (isSetName());
    list.add(present_Name);
    if (present_Name)
      list.add(Name);

    boolean present_Importance = true;
    list.add(present_Importance);
    if (present_Importance)
      list.add(Importance);

    boolean present_RaiseDateTime = true && (isSetRaiseDateTime());
    list.add(present_RaiseDateTime);
    if (present_RaiseDateTime)
      list.add(RaiseDateTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(NewsEventInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Currency, other.Currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImportance()).compareTo(other.isSetImportance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Importance, other.Importance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaiseDateTime()).compareTo(other.isSetRaiseDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaiseDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RaiseDateTime, other.RaiseDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NewsEventInfo(");
    boolean first = true;

    sb.append("Currency:");
    if (this.Currency == null) {
      sb.append("null");
    } else {
      sb.append(this.Currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Importance:");
    sb.append(this.Importance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RaiseDateTime:");
    if (this.RaiseDateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.RaiseDateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NewsEventInfoStandardSchemeFactory implements SchemeFactory {
    public NewsEventInfoStandardScheme getScheme() {
      return new NewsEventInfoStandardScheme();
    }
  }

  private static class NewsEventInfoStandardScheme extends StandardScheme<NewsEventInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NewsEventInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMPORTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.Importance = iprot.readByte();
              struct.setImportanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RAISE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RaiseDateTime = iprot.readString();
              struct.setRaiseDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NewsEventInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.Currency);
        oprot.writeFieldEnd();
      }
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMPORTANCE_FIELD_DESC);
      oprot.writeByte(struct.Importance);
      oprot.writeFieldEnd();
      if (struct.RaiseDateTime != null) {
        oprot.writeFieldBegin(RAISE_DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.RaiseDateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NewsEventInfoTupleSchemeFactory implements SchemeFactory {
    public NewsEventInfoTupleScheme getScheme() {
      return new NewsEventInfoTupleScheme();
    }
  }

  private static class NewsEventInfoTupleScheme extends TupleScheme<NewsEventInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NewsEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrency()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetImportance()) {
        optionals.set(2);
      }
      if (struct.isSetRaiseDateTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.Currency);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetImportance()) {
        oprot.writeByte(struct.Importance);
      }
      if (struct.isSetRaiseDateTime()) {
        oprot.writeString(struct.RaiseDateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NewsEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.Currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Importance = iprot.readByte();
        struct.setImportanceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.RaiseDateTime = iprot.readString();
        struct.setRaiseDateTimeIsSet(true);
      }
    }
  }

}

